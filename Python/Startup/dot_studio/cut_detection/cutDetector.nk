Read {
 name InputClip
}
Group {
 name CutDetector
 addUserKnob {20 User l CutDetector}
 addUserKnob {41 intensitydata l INVISIBLE +INVISIBLE T CurveTool1.intensitydata}
 addUserKnob {41 ROI l INVISIBLE +INVISIBLE T CurveTool1.ROI}
 addUserKnob {3 first l INVISIBLE t "The first frame to analyse from" +INVISIBLE}
 first {{"\[value input.first]"}}
 addUserKnob {3 last l INVISIBLE -STARTLINE +INVISIBLE}
 last {{"\[value input.last]"}}
 addUserKnob {26 anal_line l Analysis}
 addUserKnob {41 channels l "Analysis Channels" T CurveTool1.channels}
 addUserKnob {20 endGroup n -1}
 addUserKnob {7 magnitude l Magnitude}
 magnitude {{abs(intensitydata.r)+abs(intensitydata.g)+abs(intensitydata.b)}}
 addUserKnob {41 go l "Analyse Frames" t "Compute the Cut detection" T CurveTool1.go}
 addUserKnob {22 reset_data l "Reset Analysis" t "Reset the curve data" -STARTLINE T "nuke.thisNode().knob('intensitydata').clearAnimated()\nnuke.thisNode().knob('intensitydata').setValue(0)"}
 addUserKnob {26 dec_line l Decision}
 addUserKnob {7 threshold l Threshold R 0 3}
 threshold 0.33
 addUserKnob {22 compute_threshold l AutoSet t "Sets a rough threshold for cut detection based on the mean + 3 STDs" -STARTLINE T "from math import sqrt\n\ndef median(numbers):\n  \"\"\"Returns the median value for a list of numbers\"\"\"\n  srtd = sorted(numbers)\n  mid = int(len(numbers)/2)\n\n  if len(numbers) % 2 == 0:\n      return (srtd\[mid-1] + srtd\[mid]) / 2.0\n  else:\n      return srtd\[mid]\n\nN = nuke.thisNode()\nmagKnob = N\['magnitude']\nfirst = int(N\[\"first\"].value())\nlast = int(N\[\"last\"].value())\nmag = \[0] * int((last-first)+1)\nfor x in range(first,last):\n  mag\[x] = magKnob.valueAt(x)\n\nmean = sum(mag) / len(mag)\nprint \"Mean is %f\" % mean\nstd = sqrt(sum(\[(x - mean) ** 2 for x in mag]) / len(mag))\nprint \"Standard Deviation is %f\" % std\nT = mean + (3.0*std)\nT2 = median(mag) + (3.0*std)\nprint \"Mean Threshold is %f\" % T\nprint \"Median Threshold is %f\" % T2\n\nN\['threshold'].setValue(T2)"}
 addUserKnob {3 min_frames l "Min. cut frames" t "This value dictates the minimum number of frames allowed between cuts (default = 10)"}
 min_frames 10
 addUserKnob {3 decision l "Cut Decision" t "This is the raw decision vector \[0,1] based on the magnitude being greater than a threshold of rgb avg differences."}
 decision {{"step(threshold, magnitude)"}}
 addUserKnob {22 set_keys l "Set Keys" t "Click here to set keys based on the cut decision vector" -STARTLINE T "N = nuke.thisNode()\nN\['clear_keys'].execute()\ndecisionKnob = N\['decision']\nmagnitudeKnob = N\['magnitude']\nthreshold = N\['threshold'].value()\nfirst = int(N\[\"first\"].value())\nlast = int(N\[\"last\"].value())\nDEC = \[0] * int((last-first)+1)\nfor x in range(first,last):\n  DEC\[x] = decisionKnob.valueAt(x)\n\nmag = \[0] * int((last-first)+1)\nfor x in range(first,last):\n  mag\[x] = magnitudeKnob.valueAt(x)\n\nminFrames =  int(N\[\"min_frames\"].value())\ncutPoints = \[i for i, x in enumerate(DEC) if x == 1 and sum(DEC\[i-minFrames:i])==0]\n\nprunedCuts = \[cut for cut in cutPoints if mag\[cut-1]<(0.25*threshold) and mag\[cut+1]<(0.25*threshold)]\nprint \"PRUNED: \" + str(prunedCuts)\nfor cut in prunedCuts:\n  decisionKnob.setKeyAt( cut+1 )"}
 addUserKnob {22 clear_keys l "Clear Keys" -STARTLINE T "nuke.thisNode()\['decision'].clearAnimated()\nnuke.thisNode()\['decision'].setExpression(\"step(threshold, magnitude)\")"}
 addUserKnob {26 output_line l Output}
 addUserKnob {4 output l display t "Select the output of the Cut Detector" M {source ROI difference ""}}
 addUserKnob {22 create_sequence l "Create Sequence" t "Generates a new .hrox Project with this Clip cut up into shots." T "proj = hiero.core.newProject()\nrt = proj.clipsBin()\nN = nuke.thisNode()\nf = N.input(0)\['file'].value()\nclip = hiero.core.Clip(f)\nrt.addItem(hiero.core.BinItem(clip))\nclipFPS = clip.framerate()\nsequence = hiero.core.Sequence(clip.name())\nrt.addItem(hiero.core.BinItem(sequence))\nsequence.setFramerate(clipFPS)\nsequence.addClip(clip, 0)\n\ndecisionKnob = N\['decision']\nfirst = int(N\[\"first\"].value())\nlast = int(N\[\"last\"].value())\nDEC = \[0] * int((last-first)+1)\nfor x in range(first,last):\n  DEC\[x] = decisionKnob.valueAt(x)\n\nminFrames = int(N\[\"min_frames\"].value())\ncutPoints = \[i for i, x in enumerate(DEC) if x == 1 and sum(DEC\[i-minFrames:i])==0]\n\nfor track in sequence.items():\n  track.razorAt(cutPoints)\n\nhiero.ui.openInTimeline(sequence.binItem())" +STARTLINE}
}
 Input {
  inputs 0
  name Input1
  xpos 180
  ypos -29
 }
set N193770 [stack 0]
 Reformat {
  type "to box"
  box_width 256
  box_height 256
  box_fixed true
  resize distort
  filter Impulse
  name Reformat1
 }
set N1b869670 [stack 0]
 TimeOffset {
  time_offset -1
  time ""
  name TimeOffset1
 }
push $N1b869670
 Merge2 {
  inputs 2
  operation difference
  name Merge1
 }
 CurveTool {
  avgframes 1
  ROI {0 0 256 256}
  name CurveTool1
 }
push $N1b869670
push $N193770
 Switch {
  inputs 3
  which {{parent.output}}
  name Switch1
 }
 Output {
  name Output1
 }
end_group